1.QUEUE Program;

#include <stdio.h>
#include <stdlib.h>

#define MAX_CAPACITY 5

typedef struct {
    int* array;
    int front;
    int rear;
    int capacity;
} CircularQueue;

// Function to initialize the circular queue
void initialize_queue(CircularQueue* queue) {
    queue->array = (int*)malloc(MAX_CAPACITY * sizeof(int));
    queue->front = -1;
    queue->rear = -1;
    queue->capacity = MAX_CAPACITY;
}

// Function to check if the queue is empty
int is_empty(CircularQueue* queue) {
    return queue->front == -1;
}

// Function to check if the queue is full
int is_full(CircularQueue* queue) {
    return (queue->rear + 1) % queue->capacity == queue->front;
}

// Function to read from the queue
int read_queue(CircularQueue* queue) {
    if (is_empty(queue)) {
        printf("Queue is empty\n");
        return -1;  // to indicate an error
    } else {
        int data = queue->array[queue->front];
        if (queue->front == queue->rear) {
            queue->front = queue->rear = -1;
        } else {
            queue->front = (queue->front + 1) % queue->capacity;
        }
        return data;
    }
}

// Function to write to the queue
void write_queue(CircularQueue* queue, int data) {
    if (is_full(queue)) {
        // Overwrite oldest data when the queue is full
        queue->front = (queue->front + 1) % queue->capacity;
    } else if (is_empty(queue)) {
        queue->front = queue->rear = 0;
    } else {
        queue->rear = (queue->rear + 1) % queue->capacity;
    }
    queue->array[queue->rear] = data;
}

// Function to clear the queue
void clear_queue(CircularQueue* queue) {
    queue->front = queue->rear = -1;
}

// Function to free the allocated memory for the queue
void free_queue(CircularQueue* queue) {
    free(queue->array);
}

int main() {
    CircularQueue queue;
    initialize_queue(&queue);

    // Writing data to the queue
    write_queue(&queue, 1);
    write_queue(&queue, 2);
    write_queue(&queue, 3);
    write_queue(&queue, 4);
    write_queue(&queue, 5);

    // Reading data from the queue
    printf("Read from queue: %d\n", read_queue(&queue));  
    printf("Read from queue: %d\n", read_queue(&queue));  
    // Writing more data to the queue, overwriting the oldest
    write_queue(&queue, 6);
    write_queue(&queue, 7);

    // Reading the remaining data from the queue
    printf("Read from queue: %d\n", read_queue(&queue));  
    printf("Read from queue: %d\n", read_queue(&queue));  
    printf("Read from queue: %d\n", read_queue(&queue)); 
    printf("Read from queue: %d\n", read_queue(&queue));  
    printf("Read from queue: %d\n", read_queue(&queue));  

    // Clearing the queue
    clear_queue(&queue);

    // Freeing the allocated memory
    free_queue(&queue);

    return 0;
}

2.Payload Extraction;

#include <stdio.h>
#include <stdlib.h>

unsigned char* extract_payload(unsigned char* input_array, int input_length, int* output_length) {
    if (input_length < 7) {
        
        printf("Invalid input array length\n");
        return NULL;
    }

    // Extracting length and data type
    int length = (input_array[0] << 8) | input_array[1];
    int data_type = (input_array[2] << 8) | input_array[3];

    if (input_length < 7 + length || length < 1) {
        //Error Checking 
        printf("Invalid length or insufficient data in the input array\n");
        return NULL;
    }

    // Allocating memory for the payload
    unsigned char* payload = (unsigned char*)malloc(length - 1);

    // Copying payload data
    for (int i = 0; i < length - 1; i++) {
        payload[i] = input_array[i + 6];
    }

  
    *output_length = length - 1;

    return payload;
}

int main() {
    unsigned char input_array[] = {0x00, 0x02, 0x00, 0x11, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10};
    int input_length = sizeof(input_array) / sizeof(input_array[0]);

    int output_length;
    unsigned char* payload = extract_payload(input_array, input_length, &output_length);

    if (payload != NULL) {
        printf("Payload: ");
        for (int i = 0; i < output_length; i++) {
            printf("0X%02X ", payload[i]);
            if (i < output_length - 1) {
                printf(", ");
        }
        printf("\n");

        // Freeing the allocated memory for the payload
        free(payload);
    }

    return 0;
}

